package de.css_lims.dkmsroboterrueckmeldung;

import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil;
import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil.DynamischerTyp;
import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil.DynamischerTyp.DynamischesObjekt;
import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil.DynamischerTyp.DynamischesObjekt.WertObjekt;
import de.css_lims.dkmsroboterrueckmeldung.de.css_lims.dkmsroboterrueckmeldung.types.DynamischeTypen;
import de.css_lims.dkmsroboterrueckmeldung.de.css_lims.dkmsroboterrueckmeldung.types.MaterialKeys;
import de.css_lims.dkmsroboterrueckmeldung.de.css_lims.dkmsroboterrueckmeldung.types.TargetKeys;

import java.math.BigInteger;

import java.util.EnumMap;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 12c Development Build 12.2.1.1.0.2047
public class DkmsRoboterRueckmeldungClient {

    private static RueckmeldungRequest rueckmeldungRequest = null;
    private static List<DynamischerTyp> dTypList;
    private static DynamischerTeil dTeil;
    private static DynamischesObjekt dObjekt;

    public static void main(String[] args) {
        DkmsRoboterRueckmeldung_Service dkmsRoboterRueckmeldung_Service = new DkmsRoboterRueckmeldung_Service();
        DkmsRoboterRueckmeldung dkmsRoboterRueckmeldung = dkmsRoboterRueckmeldung_Service.getDkmsRoboterRueckmeldung();

        // Add your code to call the desired methods.

        rueckmeldungRequest = initializeStaticRequest(1, "Test7", "MSM2", "001", "boehm", "boehm", "MSM1 defekt");

        createDynamischenTypAndAdd2dTypList(DynamischeTypen.materials);
        createDynamischenTypAndAdd2dTypList(DynamischeTypen.targets);
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "1", "materials", "L00024", "id", "96Plate");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "1", "type", "newPlate", "Test8", "96Plate");

        RueckmeldungResponse rueckmeldungResponse =
            dkmsRoboterRueckmeldung.dkmsRoboterRueckmeldung(rueckmeldungRequest);
        System.out.println(rueckmeldungResponse.getStatus());

    } // end main

    private static void createDynamischenTypAndAdd2dTypList(DynamischeTypen dt) {
        DynamischerTyp dTyp = new DynamischerTyp();
        dTyp.setName(dt.name());
        dTypList.add(dTyp);
    }

    private static void createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen dt, String position, String type, String name,
                                                String id, String container) {
        /*
         * every dTyp has a DynamischesObjektList
         */
        List<DynamischesObjekt> dObjektList = null;
        for (DynamischerTyp dTyp : dTypList) {
            if (dTyp.getName().equals(dt.name())) {
                dObjektList = dTyp.getDynamischesObjekt();
            }
        }
        /*
        * create the DynamischesObjekt
        */
        dObjekt = new DynamischesObjekt();
        /*
         * and set the position
         */
        dObjekt.setPosition(new BigInteger(position));
        dObjektList.add(dObjekt);
        /*
         * and get and fill the  List<WertObjekt> wObjektList
         */
        List<WertObjekt> wObjektList = dObjekt.getWertObjekt();

        switch (dt.name()) {
        case "materials":
            {
                EnumMap<MaterialKeys, String> sourceMap = new EnumMap<>(MaterialKeys.class);
                sourceMap.put(MaterialKeys.charge, id);
                sourceMap.put(MaterialKeys.type, type);
                sourceMap.put(MaterialKeys.name, name);
                sourceMap.put(MaterialKeys.container, container);
                createObjektList(wObjektList, sourceMap);
                break;
            }
        case "targets":
            {
                EnumMap<TargetKeys, String> sourceMap = new EnumMap<>(TargetKeys.class);
                sourceMap.put(TargetKeys.rackId, id);
                sourceMap.put(TargetKeys.type, type);
                sourceMap.put(TargetKeys.name, name);
                sourceMap.put(TargetKeys.container, container);
                createObjektList(wObjektList, sourceMap);
                break;

            }
        }
    }

    private static void createObjektList(List<WertObjekt> wObjektList, EnumMap<? extends Enum, String> werteMap) {
        // for (Object o :  )
        Iterator<?> enumKeySet = werteMap.keySet().iterator();
        while (enumKeySet.hasNext()) {

            Object key = enumKeySet.next();
            // System.out.println(key.getClass());
            if (key instanceof MaterialKeys) {
                MaterialKeys temp = (MaterialKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }
            if (key instanceof TargetKeys) {
                TargetKeys temp = (TargetKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);

            }
        }

    }

    private static RueckmeldungRequest initializeStaticRequest(int requestTyp, String rackId, String roboterId,
                                                               String programmId, String userBedienId,
                                                               String userKontrolleurId, String hinweisText) {
        RueckmeldungRequest rueckmeldungRequest = new RueckmeldungRequest();


        /*
         *
         * Build the static content of the Request
         *
         *  Questions:
         *  What can be transported by using requestTyp ?
         *  0 = Test & Validate
         *  1 = Track
         */

        rueckmeldungRequest.setRequestTyp(new BigInteger(String.valueOf(requestTyp)));

        GregorianCalendar gcal = new GregorianCalendar();
        XMLGregorianCalendar xgcal = null;
        try {
            xgcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);
        } catch (DatatypeConfigurationException e) {
            System.err.println(e.getStackTrace());
        }
        rueckmeldungRequest.setZeitstempel(xgcal);

        rueckmeldungRequest.setRackId(rackId);
        rueckmeldungRequest.setRoboterId(roboterId);
        rueckmeldungRequest.setUserBedienerId(userBedienId);
        rueckmeldungRequest.setProgrammId(programmId);
        rueckmeldungRequest.setHinweisText(hinweisText);
        /*
         * optional userKontrolleurId
         */
        if (userKontrolleurId != null)
            rueckmeldungRequest.setUserKontrolleurId(userKontrolleurId);

        /*
         * realize a unique requestId from diverse robots
         */
        String uniqueID = UUID.randomUUID().toString();
        rueckmeldungRequest.setRequestId(uniqueID);


        /*
         * set dynamischen Teil - there is only ONE in each XML request.
         */
        dTeil = new DynamischerTeil();
        rueckmeldungRequest.setDynamischerTeil(dTeil);

        /*
         * dTeil has ONE List of dTyps, so get and fill it
         */
        dTypList = rueckmeldungRequest.getDynamischerTeil().getDynamischerTyp();

        return rueckmeldungRequest;
    }
}
