package de.css_lims.dkmsroboterrueckmeldung.dkms;

import de.css_lims.dkmsroboterrueckmeldung.DkmsRoboterRueckmeldung;
import de.css_lims.dkmsroboterrueckmeldung.DkmsRoboterRueckmeldung_Service;
import de.css_lims.dkmsroboterrueckmeldung.RackErzeugenRequest;
import static de.css_lims.dkmsroboterrueckmeldung.RackErzeugenRequest.DynamischerTeil;
import static de.css_lims.dkmsroboterrueckmeldung.RackErzeugenRequest.DynamischerTeil.DynamischerTyp;
import static de.css_lims.dkmsroboterrueckmeldung.RackErzeugenRequest.DynamischerTeil.DynamischerTyp.DynamischesObjekt;
import static de.css_lims.dkmsroboterrueckmeldung.RackErzeugenRequest.DynamischerTeil.DynamischerTyp.DynamischesObjekt.WertObjekt;
import de.css_lims.dkmsroboterrueckmeldung.RackErzeugenResponse;
import de.css_lims.dkmsroboterrueckmeldung.dkms.types.DynamischeTypen;
import de.css_lims.dkmsroboterrueckmeldung.dkms.types.EinzeltrackKeys;
import de.css_lims.dkmsroboterrueckmeldung.dkms.types.MaterialKeys;
import de.css_lims.dkmsroboterrueckmeldung.dkms.types.TargetKeys;
import de.css_lims.dkmsroboterrueckmeldung.dkms.types.ZuordnungKeys;

import java.math.BigInteger;

import java.util.EnumMap;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 12c Development Build 12.2.1.1.0.2047
public class DkmsRoboterRackErzeugenRequestClient {

    private static RackErzeugenRequest rackErzeugenRequest = null;
    private static List<DynamischerTyp> dTypList;
    private static DynamischerTeil dTeil;
    private static DynamischesObjekt dObjekt;

    public static void main(String[] args) {
        DkmsRoboterRueckmeldung_Service dkmsRoboterRueckmeldung_Service = new DkmsRoboterRueckmeldung_Service();
        DkmsRoboterRueckmeldung dkmsRoboterRueckmeldung = dkmsRoboterRueckmeldung_Service.getDkmsRoboterRueckmeldung();

        // Add your code to call the desired methods.

        rackErzeugenRequest =
            initializeStaticRackErzeugenRequest(0, "Test20", "1", "Tecan", "11", "boehm",
                                                "boehm", "hinweisText");


        RackErzeugenResponse rackErzeugenResponse =
            dkmsRoboterRueckmeldung.dkmsRoboterRackErzeugen(rackErzeugenRequest);
        System.out.println(rackErzeugenResponse.getStatus());

    } // end main

    public static void createDynamischenTypAndAdd2dTypList(DynamischeTypen dt) {
        DynamischerTyp dTyp = new DynamischerTyp();
        dTyp.setName(dt.name());
        dTypList.add(dTyp);
    }


    public static void createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen dt, String position,
                                                                        String... varargs) {
        /*
         * every dTyp has a DynamischesObjektList
         */
        List<DynamischesObjekt> dObjektList = null;
        for (DynamischerTyp dTyp : dTypList) {
            if (dTyp.getName().equals(dt.name())) {
                dObjektList = dTyp.getDynamischesObjekt();
            }
        }
        /*
        * create the DynamischesObjekt
        */
        dObjekt = new DynamischesObjekt();
        /*
         * and set the position
         */
        dObjekt.setPosition(new BigInteger(position));
        dObjektList.add(dObjekt);
        /*
         * and get and fill the  List<WertObjekt> wObjektList
         */
        List<WertObjekt> wObjektList = dObjekt.getWertObjekt();

        switch (dt.name()) {

        case "materials":
            {
                EnumMap<MaterialKeys, String> sourceMap = new EnumMap<>(MaterialKeys.class);
                sourceMap.put(MaterialKeys.materialId, varargs[0]);
                sourceMap.put(MaterialKeys.markierung, varargs[1]);
                sourceMap.put(MaterialKeys.container, varargs[2]);
                createObjektList(wObjektList, sourceMap);
                break;
            }
        case "targets":
            {
                EnumMap<TargetKeys, String> sourceMap = new EnumMap<>(TargetKeys.class);
                sourceMap.put(TargetKeys.name, varargs[0]);
                sourceMap.put(TargetKeys.rackId, varargs[1]);
                sourceMap.put(TargetKeys.container, varargs[2]);
                createObjektList(wObjektList, sourceMap);
                break;
            }
        case "zuordnung":
            {
                EnumMap<ZuordnungKeys, String> sourceMap = new EnumMap<>(ZuordnungKeys.class);
                sourceMap.put(ZuordnungKeys.materialId, varargs[0]);
                sourceMap.put(ZuordnungKeys.targetRackId, varargs[1]);
                createObjektList(wObjektList, sourceMap);
                break;
            }
        case "einzeltrack":
            {
                EnumMap<EinzeltrackKeys, String> sourceMap = new EnumMap<>(EinzeltrackKeys.class);
                sourceMap.put(EinzeltrackKeys.sourceRackId, varargs[0]);
                sourceMap.put(EinzeltrackKeys.sourcePosId, varargs[1]);
                sourceMap.put(EinzeltrackKeys.targetRackId, varargs[2]);
                sourceMap.put(EinzeltrackKeys.targetPosId, varargs[3]);
                createObjektList(wObjektList, sourceMap);
                break;
            }
        }
    }

    private static void createObjektList(List<WertObjekt> wObjektList, EnumMap<? extends Enum, String> werteMap) {
        // for (Object o :  )
        Iterator<?> enumKeySet = werteMap.keySet().iterator();
        while (enumKeySet.hasNext()) {

            Object key = enumKeySet.next();
            // System.out.println(key.getClass());
            if (key instanceof MaterialKeys) {
                MaterialKeys temp = (MaterialKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }
            if (key instanceof TargetKeys) {
                TargetKeys temp = (TargetKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);

            }
            if (key instanceof ZuordnungKeys) {
                ZuordnungKeys temp = (ZuordnungKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }
            if (key instanceof EinzeltrackKeys) {
                EinzeltrackKeys temp = (EinzeltrackKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }
        }

    }

    public static RackErzeugenRequest initializeStaticRackErzeugenRequest(int requestTyp, String rackId, String rackTypId,
                                                                          String roboterId, String programmId,
                                                                          String userBedienId, String userKontrolleurId,
                                                                          String hinweisText) {
        RackErzeugenRequest rackErzeugenRequest = new RackErzeugenRequest();

        rackErzeugenRequest.setRequestTyp(new BigInteger(String.valueOf(requestTyp)));

        GregorianCalendar gcal = new GregorianCalendar();
        XMLGregorianCalendar xgcal = null;
        try {
            xgcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);
        } catch (DatatypeConfigurationException e) {
            System.err.println(e.getStackTrace());
        }
        rackErzeugenRequest.setZeitstempel(xgcal);

        rackErzeugenRequest.setRackId(rackId);
        rackErzeugenRequest.setRackTypId(rackTypId);
        rackErzeugenRequest.setRoboterId(roboterId);
        rackErzeugenRequest.setUserBedienerId(userBedienId);
        rackErzeugenRequest.setProgrammId(programmId);
        rackErzeugenRequest.setHinweisText(hinweisText);
        /*
                                                                    * optional userKontrolleurId
                                                                    */
        if (userKontrolleurId != null)
            rackErzeugenRequest.setUserKontrolleurId(userKontrolleurId);

        /*
                                                                    * realize a unique requestId from diverse robots
                                                                    */
        String uniqueID = UUID.randomUUID().toString();
        rackErzeugenRequest.setRequestId(uniqueID);

        /*
                                                                    * set dynamischen Teil - there is only ONE in each XML request.
                                                                    */
            dTeil = new DynamischerTeil();
            rackErzeugenRequest.setDynamischerTeil(dTeil);

        /*
                                                                    * dTeil has ONE List of dTyps, so get and fill it
                                                                    */
           dTypList = rackErzeugenRequest.getDynamischerTeil().getDynamischerTyp();

        return rackErzeugenRequest;
    }

  

    private void setTestData() {
        /*
        * create all types you need. Elements will be present in XML in the order as created
        */
        createDynamischenTypAndAdd2dTypList(DynamischeTypen.materials);
        createDynamischenTypAndAdd2dTypList(DynamischeTypen.targets);
        createDynamischenTypAndAdd2dTypList(DynamischeTypen.zuordnung);
        System.out.println(dTypList.size());

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "1", "L00019", "Polymerase");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "2", "L00009", "PCR Mastermix");


        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "3", "L00011", "Primer HLA-A");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "3", "HLA-A", "plateId_HLA-A");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "3", "L00011", "plateId_HLA-A");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "3", "L00019", "plateId_HLA-A");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "3", "L00009", "plateId_HLA-A");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "4", "L00012", "Primer HLA-B");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "4", "HLA-B", "plateId_HLA-B");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "4", "L00012", "plateId_HLA-B");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "4", "L00019", "plateId_HLA-B");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "4", "L00009", "plateId_HLA-B");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "5", "L00013", "Primer HLA-C");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "5", "HLA-C", "plateId_HLA-C");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "5", "L00013", "plateId_HLA-C");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "5", "L00019", "plateId_HLA-C");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "5", "L00009", "plateId_HLA-C");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "6", "L00014", "Primer HLA-DR");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "6", "HLA-DR", "plateId_HLA-DR");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "6", "L00014", "plateId_HLA-DR");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "6", "L00019", "plateId_HLA-DR");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "6", "L00009", "plateId_HLA-DR");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "7", "L00015", "Primer HLA-DQ");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "7", "HLA-DQ", "plateId_HLA-DQ");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "7", "L00015", "plateId_HLA-DQ");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "7", "L00019", "plateId_HLA-DQ");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "7", "L00009", "plateId_HLA-DQ");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "8", "L00016", "Primer HLA-DP");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "8", "HLA-DP", "plateId_HLA-DP");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "8", "L00016", "plateId_HLA-DP");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "8", "L00019", "plateId_HLA-DP");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "8", "L00009", "plateId_HLA-DP");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "9", "L00017", "Primer AB0 7a/b");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "9", "AB0 7a/b", "plateId_AB0 7a/b");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "9", "L00017", "plateId_AB0 7a/b");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "9", "L00019", "plateId_AB0 7a/b");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "9", "L00009", "plateId_AB0 7a/b");

        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.materials, "10", "L00018",
                                                         "Primer AB0 7b/CCR5/Rh");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.targets, "10", "AB0 7b/CCR5/Rh",
                                                         "plateId_AB0 7b/CCR5/Rh");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "10", "L00019",
                                                         "plateId_AB0 7b/CCR5/Rh");
        createDynamischesObject2DynamischenTypAtPosition(DynamischeTypen.zuordnung, "10", "L00009",
                                                         "plateId_AB0 7b/CCR5/Rh");

    }
}
