package de.css_lims.dkmsroboterrueckmeldung;

import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil;
import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil.DynamischerTyp;
import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil.DynamischerTyp.DynamischesObjekt;
import static de.css_lims.dkmsroboterrueckmeldung.RueckmeldungRequest.DynamischerTeil.DynamischerTyp.DynamischesObjekt.WertObjekt;
import de.css_lims.dkmsroboterrueckmeldung.types.PosFromKeys;
import de.css_lims.dkmsroboterrueckmeldung.types.PosToKeys;
import de.css_lims.dkmsroboterrueckmeldung.types.MaterialKeys;
import de.css_lims.dkmsroboterrueckmeldung.types.TargetKeys;

import java.math.BigInteger;

import java.util.EnumMap;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 12c Development Build 12.2.1.1.0.2047
public class DkmsRoboterRueckmeldungEinzelTrackClient {

    public static void main(String[] args) throws CloneNotSupportedException {
        DkmsRoboterRueckmeldung_Service dkmsRoboterRueckmeldung_Service = new DkmsRoboterRueckmeldung_Service();
        DkmsRoboterRueckmeldung dkmsRoboterRueckmeldung = dkmsRoboterRueckmeldung_Service.getDkmsRoboterRueckmeldung();
        /*
       * Build the Request
       */
        RueckmeldungRequest rueckmeldungRequest = new RueckmeldungRequest();

        /*
         * Build the static content of the Request
         */
        GregorianCalendar gcal = new GregorianCalendar();
        XMLGregorianCalendar xgcal = null;
        try {
            xgcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(gcal);
        } catch (DatatypeConfigurationException e) {
            System.err.println(e.getStackTrace());
        }
        rueckmeldungRequest.setZeitstempel(xgcal);
        rueckmeldungRequest.setRackId("sourceRackIdString");
        rueckmeldungRequest.setRoboterId("roboterIdString");
        rueckmeldungRequest.setUserBedienerId("userBedienerIdString");
        rueckmeldungRequest.setProgrammId("programmIdString");
        rueckmeldungRequest.setHinweisText("Hints");
        /*
         * optional userKontrolleurId
         */
        rueckmeldungRequest.setUserKontrolleurId("userKontrolleurIdString");


        /*
         * realize a unique requestId from diverse robots
         */
        String uniqueID = UUID.randomUUID().toString();
        rueckmeldungRequest.setRequestId(uniqueID);

        /*
         *  Questions:
         *  What can be transported by using requestTyp ?
         *  0 = Test & Validate
         *  1 = Track
         */
        rueckmeldungRequest.setRequestTyp(new BigInteger("0"));
        /*
         * set dynamischen Teil - there is only ONE in each XML request.
         */
        DynamischerTeil dTeil = new DynamischerTeil();
        rueckmeldungRequest.setDynamischerTeil(dTeil);
        /*
         * dTeil has a List of dTyps, so get and fill it
         */
        List<DynamischerTyp> dTypList = dTeil.getDynamischerTyp();

        /*
         * create ALL DynamischerTyp "materials" and "targets" and add to
         * dTypList
         */

        DynamischerTyp dTyp = new DynamischerTyp();
        dTyp.setName("SOURCE");
        dTypList.add(dTyp);

        dTyp = new DynamischerTyp();
        dTyp.setName("TARGET");
        dTypList.add(dTyp);

        dTyp = new DynamischerTyp();
        dTyp.setName("SOURCE_POS");
        dTypList.add(dTyp);

        dTyp = new DynamischerTyp();
        dTyp.setName("TARGET_POS");
        dTypList.add(dTyp);

        /*
         * dTyp materials has a materialsdObjektList
         */
        List<DynamischesObjekt> sourceObjektList = dTypList.get(0).getDynamischesObjekt();
        List<DynamischesObjekt> targetObjektList = dTypList.get(1).getDynamischesObjekt();
        List<DynamischesObjekt> sourcePosObjektList = dTypList.get(2).getDynamischesObjekt();
        List<DynamischesObjekt> targetPosObjektList = dTypList.get(3).getDynamischesObjekt();
        /*
        * create the DynamischesObjekt
        */
        DynamischesObjekt dObjekt = new DynamischesObjekt();
        /*
         * and set the position
         */
        dObjekt.setPosition(new BigInteger("1"));
        sourcePosObjektList.add(dObjekt);
        /*
         * and get and fill the  List<WertObjekt> wObjektList
         */
        List<WertObjekt> wObjektList = dObjekt.getWertObjekt();

        EnumMap<PosFromKeys, String> posFromMap = new EnumMap<>(PosFromKeys.class);
        posFromMap.put(PosFromKeys.PLATE_ID, "plateId");
        posFromMap.put(PosFromKeys.SAMPLE_ID, "sampleId");
        posFromMap.put(PosFromKeys.POSITION, "A01");
        createObjektList(wObjektList, posFromMap);

        /*
        * create another DynamischesObjekt
        */
        dObjekt = new DynamischesObjekt();
        /*
         * and set the position
         */
        dObjekt.setPosition(new BigInteger("2"));
        dTypList.get(2)
                .getDynamischesObjekt()
                .add(dObjekt);
        wObjektList = dObjekt.getWertObjekt();
        posFromMap = new EnumMap<>(PosFromKeys.class);
        posFromMap.put(PosFromKeys.PLATE_ID, "plateId");
        posFromMap.put(PosFromKeys.SAMPLE_ID, "sampleId");
        posFromMap.put(PosFromKeys.POSITION, "B01");

        createObjektList(wObjektList, posFromMap);

        //        dObjekt = newInstance(dObjekt);
        //        dObjekt.setPosition(new BigInteger("2"));
        //        dTypList.get(0)
        //                .getDynamischesObjekt()
        //                .add(dObjekt);

        dObjekt = new DynamischesObjekt();
        dObjekt.setPosition(new BigInteger("1"));

        targetPosObjektList.add(dObjekt);
        wObjektList = dObjekt.getWertObjekt();
        EnumMap<PosToKeys, String> posToMap = new EnumMap<>(PosToKeys.class);
        posToMap = new EnumMap<>(PosToKeys.class);
        posToMap.put(PosToKeys.PLATE_ID, "plateId");
        posToMap.put(PosToKeys.SAMPLE_ID, "sampleId");
        posToMap.put(PosToKeys.POSITION, "A12");
        createObjektList(wObjektList, posToMap);


        dObjekt = new DynamischesObjekt();
        dObjekt.setPosition(new BigInteger("2"));
        targetPosObjektList.add(dObjekt);
        wObjektList = dObjekt.getWertObjekt();
        posToMap = new EnumMap<>(PosToKeys.class);
        posToMap = new EnumMap<>(PosToKeys.class);
        posToMap.put(PosToKeys.PLATE_ID, "plateId");
        posToMap.put(PosToKeys.SAMPLE_ID, "sampleId");
        posToMap.put(PosToKeys.POSITION, "B12");
        createObjektList(wObjektList, posToMap);


        RueckmeldeungResponse rueckmeldeungResponse =
            dkmsRoboterRueckmeldung.dkmsRoboterRueckmeldung(rueckmeldungRequest);
        System.out.println(rueckmeldeungResponse.getStatus());

    } // end main

    /**
     * Alternative style for a copy constructor, using a static newInstance
     * method.
     */
    public static DynamischesObjekt newInstance(DynamischesObjekt dObjekt) {
        DynamischesObjekt dObjektCopy = new DynamischesObjekt();
        dObjektCopy.wertObjekt = dObjekt.getWertObjekt();
        return dObjektCopy;
    }


    private static void createMaterialsObjektList(List<WertObjekt> wObjektList, EnumMap<MaterialKeys, String> werteMap) {
        Iterator<MaterialKeys> enumKeySet = werteMap.keySet().iterator();
        while (enumKeySet.hasNext()) {
            MaterialKeys key = enumKeySet.next();
            WertObjekt wObjekt = new WertObjekt();
            wObjekt.setName(key.name());
            wObjekt.setInhalt(werteMap.get(key));
            wObjektList.add(wObjekt);
        }
    }

    private static void createTargetObjektList(List<WertObjekt> wObjektList, EnumMap<TargetKeys, String> werteMap) {
        Iterator<TargetKeys> enumKeySet = werteMap.keySet().iterator();
        while (enumKeySet.hasNext()) {
            TargetKeys key = enumKeySet.next();
            WertObjekt wObjekt = new WertObjekt();
            wObjekt.setName(key.name());
            wObjekt.setInhalt(werteMap.get(key));
            wObjektList.add(wObjekt);
        }
    }

    private static void createObjektList(List<WertObjekt> wObjektList, EnumMap<? extends Enum, String> werteMap) {
        // for (Object o :  )
        Iterator<?> enumKeySet = werteMap.keySet().iterator();
        while (enumKeySet.hasNext()) {

            Object key = enumKeySet.next();
            // System.out.println(key.getClass());
            if (key instanceof MaterialKeys) {
                MaterialKeys temp = (MaterialKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }
            if (key instanceof TargetKeys) {
                TargetKeys temp = (TargetKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }

            if (key instanceof PosFromKeys) {
                PosFromKeys temp = (PosFromKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }

            if (key instanceof PosToKeys) {
                PosToKeys temp = (PosToKeys) key;
                WertObjekt wObjekt = new WertObjekt();
                wObjekt.setName(temp.name());
                wObjekt.setInhalt(werteMap.get(temp));
                wObjektList.add(wObjekt);
            }
        }

    }


}
